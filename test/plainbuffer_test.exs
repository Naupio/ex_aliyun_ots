defmodule ExAliyunOtsTest.PlainBuffer do
  use ExUnit.Case
  require Logger
  alias ExAliyunOts.Const.PKType
  require PKType
  alias ExAliyunOts.PlainBuffer, as: PlainBuffer

  test "deserialize row with primary keys only" do
    row = <<117, 0, 0, 0, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 41, 0, 0, 0, 3, 36, 0, 0, 0, 99, 51, 98, 101, 56, 54, 49, 55, 45, 49, 48, 100, 55, 45, 52, 50, 50, 98, 45, 56, 102, 56, 48, 45, 53, 56, 54, 48, 51, 100, 49, 54, 48, 51, 100, 54, 10, 77, 3, 4, 10, 0, 0, 0, 100, 101, 102, 97, 117, 108, 116, 95, 105, 100, 5, 9, 0, 0, 0, 0, 168, 208, 145, 104, 49, 91, 5, 0, 10, 195, 3, 4, 8, 0, 0, 0, 111, 114, 100, 101, 114, 95, 105, 100, 5, 11, 0, 0, 0, 3, 6, 0, 0, 0, 111, 114, 100, 101, 114, 50, 10, 221, 9, 6>>
    {primary_keys, nil} = PlainBuffer.deserialize_row(row)
    assert length(primary_keys) == 3
    assert {"partition_key", "c3be8617-10d7-422b-8f80-58603d1603d6"} = Enum.at(primary_keys, 0)
    assert {"default_id", 1507642649465000} = Enum.at(primary_keys, 1)
    assert {"order_id", "order2"} = Enum.at(primary_keys, 2)
  end

  test "deserialize row with primary keys and columns" do
    row = <<117, 0, 0, 0, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 41, 0, 0, 0, 3, 36, 0, 0, 0, 99, 51, 98, 101, 56, 54, 49, 55, 45, 49, 48, 100, 55, 45, 52, 50, 50, 98, 45, 56, 102, 56, 48, 45, 53, 56, 54, 48, 51, 100, 49, 54, 48, 51, 100, 54, 10, 77, 3, 4, 10, 0, 0, 0, 100, 101, 102, 97, 117, 108, 116, 95, 105, 100, 5, 9, 0, 0, 0, 0, 0, 41, 115, 104, 49, 91, 5, 0, 10, 241, 3, 4, 8, 0, 0, 0, 111, 114, 100, 101, 114, 95, 105, 100, 5, 11, 0, 0, 0, 3, 6, 0, 0, 0, 111, 114, 100, 101, 114, 50, 10, 221, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 20, 0, 0, 0, 3, 15, 0, 0, 0, 117, 112, 100, 97, 116, 101, 100, 95, 110, 97, 109, 101, 95, 118, 50, 7, 189, 35, 129, 6, 95, 1, 0, 0, 10, 151, 9, 29>>
    {primary_keys, attributes} = PlainBuffer.deserialize_row(row)
    assert length(primary_keys) == 3
    assert length(attributes) == 1
    assert {"partition_key", "c3be8617-10d7-422b-8f80-58603d1603d6"} = Enum.at(primary_keys, 0)
    assert {"default_id", 1507642647456000} = Enum.at(primary_keys, 1)
    assert {"order_id", "order2"} = Enum.at(primary_keys, 2)
    assert {"name", "updated_name_v2", 1507642647485} = Enum.at(attributes, 0)
  end

  test "deserialize case to fix lose attributes" do
    row = <<117, 0, 0, 0, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 41, 0, 0, 0, 3, 36, 0, 0, 0, 99, 51, 98, 101, 56, 54, 49, 55, 45, 49, 48, 100, 55, 45, 52, 50, 50, 98, 45, 56, 102, 56, 48, 45, 53, 56, 54, 48, 51, 100, 49, 54, 48, 51, 100, 54, 10, 77, 3, 4, 10, 0, 0, 0, 100, 101, 102, 97, 117, 108, 116, 95, 105, 100, 5, 9, 0, 0, 0, 0, 224, 108, 205, 137, 60, 91, 5, 0, 10, 68, 3, 4, 8, 0, 0, 0, 111, 114, 100, 101, 114, 95, 105, 100, 5, 11, 0, 0, 0, 3, 6, 0, 0, 0, 111, 114, 100, 101, 114, 50, 10, 221, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 20, 0, 0, 0, 3, 15, 0, 0, 0, 117, 112, 100, 97, 116, 101, 100, 95, 110, 97, 109, 101, 95, 118, 50, 7, 231, 146, 90, 9, 95, 1, 0, 0, 10, 229, 9, 67>>
    {primary_keys, attributes} = PlainBuffer.deserialize_row(row)
    assert length(primary_keys) == 3
    assert length(attributes) == 1
    assert {"partition_key", "c3be8617-10d7-422b-8f80-58603d1603d6"} = Enum.at(primary_keys, 0)
    assert {"default_id", 1507690451660000} = Enum.at(primary_keys, 1)
    assert {"order_id", "order2"} = Enum.at(primary_keys, 2)
    assert {"name", "updated_name_v2", 1507690451687} = Enum.at(attributes, 0)
  end

  test "serialize primary keys for get_range" do
    # the test sample data `sample_data_inf_min` is calculated by Python SDK, the corresponding input parimary keys are [("gid", 1), ("uid", INF_MIN)]
    sample_data_inf_min = <<117, 0, 0, 0, 1, 3, 4, 3, 0, 0, 0, 103, 105, 100, 5, 9, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 42, 3, 4, 3, 0, 0, 0, 117, 105, 100, 5, 1, 0, 0, 0, 9, 10, 29, 9, 122>>
    serialized_pk_with_inf_min = PlainBuffer.serialize_primary_keys([{"gid", 1}, {"uid", PKType.inf_min}])
    assert sample_data_inf_min == serialized_pk_with_inf_min

    # the test sample data `sample_data_inf_max` is calculated by Python SDK, the corresponding input parimary keys are [("gid", 4), ("uid", INF_MAX)]
    sample_data_inf_max = <<117, 0, 0, 0, 1, 3, 4, 3, 0, 0, 0, 103, 105, 100, 5, 9, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 10, 117, 3, 4, 3, 0, 0, 0, 117, 105, 100, 5, 1, 0, 0, 0, 10, 10, 20, 9, 164>>
    serialized_pk_with_inf_max = PlainBuffer.serialize_primary_keys([{"gid", 4}, {"uid", PKType.inf_max}])
    assert sample_data_inf_max == serialized_pk_with_inf_max
  end

  test "deserialize rows from get_range result" do
    rows = <<117, 0, 0, 0, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 57, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 168, 110, 133, 227, 86, 91, 5, 0, 10, 111, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 11, 0, 0, 0, 3, 6, 0, 0, 0, 110, 97, 109, 101, 95, 49, 7, 57, 122, 25, 16, 95, 1, 0, 0, 10, 194, 3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 57, 122, 25, 16, 95, 1, 0, 0, 10, 177, 9, 171, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 10, 12, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 112, 30, 134, 227, 86, 91, 5, 0, 10, 239, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 11, 0, 0, 0, 3, 6, 0, 0, 0, 110, 97, 109, 101, 95, 50, 7, 102, 122, 25, 16, 95, 1, 0, 0, 10, 67, 3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 7, 102, 122, 25, 16, 95, 1, 0, 0, 10, 189, 9, 189, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 10, 31, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 240, 92, 134, 227, 86, 91, 5, 0, 10, 172, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 11, 0, 0, 0, 3, 6, 0, 0, 0, 110, 97, 109, 101, 95, 51, 7, 118, 122, 25, 16, 95, 1, 0, 0, 10, 13, 3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 7, 118, 122, 25, 16, 95, 1, 0, 0, 10, 136, 9, 154, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 10, 102, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 184, 143, 134, 227, 86, 91, 5, 0, 10, 146, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 11, 0, 0, 0, 3, 6, 0, 0, 0, 110, 97, 109, 101, 95, 52, 7, 131, 122, 25, 16, 95, 1, 0, 0, 10, 0, 3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 7, 131, 122, 25, 16, 95, 1, 0, 0, 10, 227, 9, 225, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 10, 117, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 192, 225, 134, 227, 86, 91, 5, 0, 10, 77, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 11, 0, 0, 0, 3, 6, 0, 0, 0, 110, 97, 109, 101, 95, 53, 7, 152, 122, 25, 16, 95, 1, 0, 0, 10, 227, 3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 7, 152, 122, 25, 16, 95, 1, 0, 0, 10, 123, 9, 80, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 10, 64, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 136, 20, 135, 227, 86, 91, 5, 0, 10, 55, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 11, 0, 0, 0, 3, 6, 0, 0, 0, 110, 97, 109, 101, 95, 54, 7, 165, 122, 25, 16, 95, 1, 0, 0, 10, 246, 3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 7, 165, 122, 25, 16, 95, 1, 0, 0, 10, 227, 9, 110, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 10, 83, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 192, 94, 135, 227, 86, 91, 5, 0, 10, 101, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 11, 0, 0, 0, 3, 6, 0, 0, 0, 110, 97, 109, 101, 95, 55, 7, 184, 122, 25, 16, 95, 1, 0, 0, 10, 127, 3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 184, 122, 25, 16, 95, 1, 0, 0, 10, 17, 9, 37, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 10, 178, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 112, 149, 135, 227, 86, 91, 5, 0, 10, 192, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 11, 0, 0, 0, 3, 6, 0, 0, 0, 110, 97, 109, 101, 95, 56, 7, 198, 122, 25, 16, 95, 1, 0, 0, 10, 161, 3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 7, 198, 122, 25, 16, 95, 1, 0, 0, 10, 120, 9, 134, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 10, 161, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 120, 231, 135, 227, 86, 91, 5, 0, 10, 214, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 11, 0, 0, 0, 3, 6, 0, 0, 0, 110, 97, 109, 101, 95, 57, 7, 219, 122, 25, 16, 95, 1, 0, 0, 10, 40, 3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 7, 219, 122, 25, 16, 95, 1, 0, 0, 10, 138, 9, 14, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 10, 148, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 40, 30, 136, 227, 86, 91, 5, 0, 10, 37, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 12, 0, 0, 0, 3, 7, 0, 0, 0, 110, 97, 109, 101, 95, 49, 48, 7, 233, 122, 25, 16, 95, 1, 0, 0, 10, 220, 3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 7, 233, 122, 25, 16, 95, 1, 0, 0, 10, 243, 9, 84>>

    rows_data = PlainBuffer.deserialize_rows(rows)

    assert length(rows_data) == 10
    rows_data
    |> Enum.with_index()
    |> Enum.map(fn({{primary_keys, attribute_columns}, index}) -> 
      value = index + 1 
      assert {"partition_key", ^value} = Enum.at(primary_keys, 0)
      name_value = "name_#{value}"
      assert {"name", ^name_value, _timestamp} = Enum.at(attribute_columns, 0)
      assert {"value", ^value, _timestamp} = Enum.at(attribute_columns, 1)
    end)
  end

  test "deserialize put row" do
    row = <<117, 0, 0, 0, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 10, 106, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 184, 182, 184, 239, 105, 91, 5, 0, 10, 36, 9, 184>>
    {primary_keys, attribute_columns} = PlainBuffer.deserialize_row(row)
    assert attribute_columns == nil
    assert length(primary_keys) == 2
    assert {"partition_key", 770} = Enum.at(primary_keys, 0)
    assert {"id", 1507885435107000} = Enum.at(primary_keys, 1)

  end

  test "deserialize put row 2" do
    row = <<117, 0, 0, 0, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 10, 106, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 152, 236, 34, 46, 106, 91, 5, 0, 10, 231, 9, 106>>
    result = PlainBuffer.deserialize_row(row)
    Logger.debug(fn -> "#{inspect result}" end)
  end

  test "calculate tag cell index" do
    mock = <<0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 10, 106, 3, 4, 2, 0>>
    index = PlainBuffer.calculate_tag_cell_index(mock)
    assert index == 13
    mock = <<0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 11, 106, 3, 4, 2, 0, 0, 2, 1, 3, 4, 0, 0, 0, 0, 10, 98, 3, 4, 1>>
    index = PlainBuffer.calculate_tag_cell_index(mock)
    assert index == 28
    mock = <<3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 7, 235, 57, 242, 24, 95, 1, 0, 0, 10, 178, 9, 94, 1>>
    index = PlainBuffer.calculate_tag_cell_index(mock)
    assert index == nil
    mock = <<3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 7, 235, 57, 242, 24, 95, 1, 0, 0, 10, 178, 9, 94, 1, 10, 1, 3, 4>>
    index = PlainBuffer.calculate_tag_cell_index(mock)
    assert index == 41

    mock = <<5, 3, 4, 0, 0, 3, 254, 3, 0, 0, 123, 34, 99, 111, 110, 116, 101, 110, 116, 34, 58, 34, 60, 112, 62, 230, 179, 179, 230, 177, 160, 231, 162, 167, 230, 179, 162, 231, 190, 142, 230, 153, 175, 229, 156, 168, 228, 190, 167, 239, 188, 140, 232, 174, 190, 231, 171, 139, 229, 174, 164, 229, 164, 150, 233, 156, 178, 229, 164, 169, 231, 148, 168, 233, 164, 144, 229, 140, 186, 227, 128, 130, 231, 162, 167, 230, 182, 155, 230, 132, 143, 229, 155, 189, 230, 184, 148, 228, 185, 161, 230, 187, 161, 232, 189, 189, 230, 132, 143, 229, 155, 189, 230, 150, 176, 230, 187, 139, 229, 145, 179, 239, 188, 140, 228, 189, 191, 231, 148, 168, 229, 174, 182, 229, 186, 173, 229, 188, 143, 228, 188, 160, 231, 187, 159, 230, 137, 139, 230, 179, 149, 231, 178, 190, 229, 136, 182, 230, 173, 163, 229, 174, 151, 230, 132, 143, 229, 188, 143, 230, 150, 153, 231, 144, 134, 239, 188, 140, 229, 156, 176, 233, 129, 147, 231, 154, 132, 230, 181, 183, 233, 178, 156, 230, 150, 153, 231, 144, 134, 227, 128, 129, 231, 155, 155, 229, 174, 180, 230, 144, 173, 233, 133, 141, 231, 190, 142, 233, 133, 146, 239, 188, 140, 229, 156, 168, 230, 184, 133, 233, 163, 142, 230, 139, 130, 233, 157, 162, 231, 154, 132, 231, 178, 190, 232, 135, 180, 230, 176, 155, 229, 155, 180, 233, 135, 140, 228, 186, 171, 229, 143, 151, 230, 132, 143, 229, 164, 167, 229, 136, 169, 231, 190, 142, 233, 163, 159, 227, 128, 130, 60, 47, 112, 62, 60, 112, 62, 60, 98, 114, 62, 60, 47, 112, 62, 60, 112, 62, 42, 233, 135, 145, 229, 141, 161, 228, 188, 154, 229, 145, 152, 229, 143, 175, 228, 186, 171, 228, 185, 157, 230, 138, 152, 228, 188, 152, 230, 131, 160, 239, 188, 140, 231, 186, 162, 229, 174, 157, 228, 188, 154, 229, 145, 152, 229, 143, 175, 228, 186, 171, 229, 133, 171, 228, 186, 148, 230, 138, 152, 228, 188, 152, 230, 131, 160, 239, 188, 140, 233, 146, 187, 231, 159, 179, 228, 188, 154, 229, 145, 152, 229, 143, 175, 228, 186, 171, 229, 133, 171, 230, 138, 152, 228, 188, 152, 230, 131, 160, 227, 128, 130, 60, 47, 112, 62, 60, 112, 62, 60, 98, 114, 62, 60, 47, 112, 62, 60, 117, 108, 62, 60, 108, 105, 62, 229, 156, 176, 231, 130, 185, 239, 188, 154, 230, 190, 179, 233, 151, 168, 229, 168, 129, 229, 176, 188, 230, 150, 175, 228, 186, 186, 229, 156, 176, 233, 157, 162, 229, 164, 167, 229, 160, 130, 239, 188, 140, 49, 48, 51, 57, 229, 143, 183, 239, 188, 136, 232, 191, 145, 229, 168, 129, 229, 176, 188, 230, 150, 175, 228, 186, 186, 229, 137, 167, 229, 156, 186, 239, 188, 137, 60, 47, 108, 105, 62, 60, 108, 105, 62, 232, 144, 165, 228, 184, 154, 230, 151, 182, 233, 151, 180, 239, 188, 154, 233, 164, 144, 229, 142, 133, 229, 141, 179, 230, 151, 165, 232, 181, 183, 229, 133, 179, 233, 151, 173, 232, 135, 179, 229, 143, 166, 232, 161, 140, 233, 128, 154, 231, 159, 165, 60, 47, 108, 105, 62, 60, 108, 105, 62, 233, 162, 132, 232, 174, 162, 231, 148, 181, 232, 175, 157, 239, 188, 154, 43, 56, 53, 51, 32, 56, 49, 49, 56, 32, 57, 57, 53, 48, 60, 47, 108, 105, 62, 60, 108, 105, 62, 233, 160, 144, 232, 168, 130, 233, 130, 174, 228, 187, 182, 239, 188, 154, 112, 111, 114, 116, 111, 102, 105, 110, 111, 46, 114, 101, 115, 101, 114, 118, 97, 116, 105, 111, 110, 64, 115, 97, 110, 100, 115, 46, 99, 111, 109, 46, 109, 111, 60, 47, 108, 105, 62, 60, 47, 117, 108, 62, 34, 44, 34, 104, 111, 119, 84, 111, 82, 101, 100, 101, 101, 109, 34, 58, 110, 117, 108, 108, 44, 34, 105, 109, 103, 95, 98, 97, 110, 110, 101, 114, 95, 117, 114, 108, 34, 58, 34, 104, 116, 116, 112, 115, 58, 47, 47, 101, 120, 111, 115, 115, 46, 111, 115, 115, 45, 99, 110, 45, 115, 104, 101, 110, 122, 104, 101, 110, 46, 97, 108, 105, 121, 117, 110, 99, 115, 46, 99, 111, 109, 47, 118, 50, 47, 100, 101, 118, 47, 111, 102, 102, 101, 114, 95, 99, 97, 116, 97, 108, 111, 103, 117, 101, 115, 47, 100, 105, 110, 105, 110, 103, 45, 116, 105, 108, 101, 45, 112, 111, 114, 116, 111, 102, 105, 110, 111, 45, 53, 48, 48, 37, 67, 51, 37, 57, 55, 51, 52, 48, 45, 55, 101, 97, 51, 57, 102, 50, 54, 53, 54, 97, 100, 54, 56, 53, 102, 99, 98, 54, 102, 99, 102, 48, 54, 52, 53, 54, 102, 101, 55, 100, 54, 46, 106, 112, 103, 34, 44, 34, 105, 109, 103, 95, 99, 111, 118, 101, 114, 95, 117, 114, 108, 34, 58, 34, 104, 116, 116, 112, 115, 58, 47, 47, 101, 120, 111, 115, 115, 46, 111, 115, 115, 45, 99, 110, 45, 115, 104, 101, 110, 122, 104, 101, 110, 46, 97, 108, 105, 121, 117, 110, 99, 115, 46, 99, 111, 109, 47, 118, 50, 47, 100, 101, 118, 47, 111, 102, 102, 101, 114, 95, 99, 97, 116, 97, 108, 111, 103, 117, 101, 115, 47, 49, 49, 50, 53, 120, 54, 48, 48, 45, 100, 97, 53, 51, 98, 56, 52, 102, 49, 49, 99, 48, 97, 55, 97, 57, 55, 100, 100, 102, 99, 57, 102, 56, 49, 102, 98, 57, 50, 53, 55, 50, 46, 106, 112, 103, 34, 44, 34, 115, 117, 109, 109, 97, 114, 121, 34, 58, 34, 32, 34, 44, 34, 116, 101, 114, 109, 115, 34, 58, 110, 117, 108, 108, 44, 34, 116, 105, 116, 108, 101, 34, 58, 34, 231, 162, 167, 230, 182, 155, 230, 132, 143, 229, 155, 189, 230, 184, 148, 228, 185, 161, 34, 125, 7, 128, 208, 250, 190, 112, 1, 0, 0, 10, 218, 3, 4, 12, 0, 0, 0, 122, 95, 99, 111, 110, 116, 101, 110, 116, 95, 116, 99, 5, 181, 4, 0, 0, 3, 176, 4, 0, 0, 123, 34, 99, 111, 110, 116, 101, 110, 116, 34, 58, 34, 60, 112, 62, 231, 148, 168, 229, 174, 182, 229, 186, 173, 229, 188, 143, 229, 130, 179, 231, 181, 177, 230, 137, 139, 230, 179, 149, 231, 178, 190, 232, 163, 189, 230, 173, 163, 229, 174, 151, 230, 132, 143, 229, 188, 143, 230, 150, 153, 231, 144, 134, 231, 154, 132, 233, 164, 144, 229, 187, 179, 227, 128, 130, 230, 190, 179, 233, 150, 128, 229, 168, 129, 229, 176, 188, 230, 150, 175, 228, 186, 186, 230, 187, 191, 232, 188, 137, 230, 132, 143, 229, 156, 139, 230, 187, 139, 229, 145, 179, 230, 150, 176, 233, 171, 148, 233, 169, 151, 227, 128, 130, 233, 164, 144, 229, 187, 179, 232, 168, 173, 232, 168, 136, 230, 153, 130, 229, 176, 154, 239, 188, 140, 228, 190, 155, 230, 135, 137, 229, 156, 176, 233, 129, 147, 231, 154, 132, 231, 182, 147, 229, 133, 184, 230, 132, 143, 229, 164, 167, 229, 136, 169, 231, 190, 142, 233, 163, 159, 227, 128, 130, 229, 143, 166, 229, 164, 150, 233, 130, 132, 232, 168, 173, 230, 156, 137, 229, 174, 164, 229, 164, 150, 231, 154, 132, 233, 156, 178, 229, 164, 169, 231, 148, 168, 233, 164, 144, 229, 141, 128, 239, 188, 140, 229, 176, 135, 230, 179, 179, 230, 177, 160, 231, 162, 167, 230, 179, 162, 231, 190, 142, 230, 153, 175, 231, 155, 161, 230, 148, 182, 231, 156, 188, 229, 186, 149, 227, 128, 130, 60, 47, 112, 62, 60, 112, 62, 60, 98, 114, 62, 60, 47, 112, 62, 60, 112, 62, 42, 233, 135, 145, 229, 141, 161, 230, 156, 131, 229, 147, 161, 229, 143, 175, 228, 186, 171, 228, 185, 157, 230, 138, 152, 229, 132, 170, 230, 131, 160, 239, 188, 140, 231, 180, 133, 229, 175, 182, 230, 156, 131, 229, 147, 161, 229, 143, 175, 228, 186, 171, 229, 133, 171, 228, 186, 148, 230, 138, 152, 229, 132, 170, 230, 131, 160, 239, 188, 140, 233, 145, 189, 231, 159, 179, 230, 156, 131, 229, 147, 161, 229, 143, 175, 228, 186, 171, 229, 133, 171, 230, 138, 152, 229, 132, 170, 230, 131, 160, 227, 128, 130, 60, 47, 112, 62, 60, 112, 62, 60, 98, 114, 62, 60, 47, 112, 62, 60, 112, 62, 229, 156, 176, 233, 187, 158, 239, 188, 154, 230, 190, 179, 233, 150, 128, 229, 168, 129, 229, 176, 188, 230, 150, 175, 228, 186, 186, 229, 156, 176, 233, 157, 162, 229, 164, 167, 229, 160, 130, 239, 188, 140, 49, 48, 51, 57, 232, 153, 159, 239, 188, 136, 232, 191, 145, 229, 168, 129, 229, 176, 188, 230, 150, 175, 228, 186, 186, 229, 138, 135, 229, 160, 180, 239, 188, 137, 60, 47, 112, 62, 60, 112, 62, 231, 135, 159, 230, 165, 173, 230, 153, 130, 233, 150, 147, 239, 188, 154, 233, 164, 144, 229, 187, 179, 229, 141, 179, 230, 151, 165, 232, 181, 183, 233, 151, 156, 233, 150, 137, 232, 135, 179, 229, 143, 166, 232, 161, 140, 233, 128, 154, 231, 159, 165, 60, 47, 112, 62, 60, 112, 62, 233, 160, 144, 232, 168, 130, 233, 155, 187, 232, 169, 177, 239, 188, 154, 60, 97, 32, 104, 114, 101, 102, 61, 92, 34, 116, 101, 108, 58, 56, 53, 51, 56, 49, 49, 56, 57, 57, 53, 48, 92, 34, 32, 114, 101, 108, 61, 92, 34, 110, 111, 111, 112, 101, 110, 101, 114, 32, 110, 111, 114, 101, 102, 101, 114, 114, 101, 114, 92, 34, 32, 116, 97, 114, 103, 101, 116, 61, 92, 34, 95, 98, 108, 97, 110, 107, 92, 34, 62, 43, 56, 53, 51, 32, 56, 49, 49, 56, 32, 57, 57, 53, 48, 60, 47, 97, 62, 60, 47, 112, 62, 60, 112, 62, 233, 160, 144, 232, 168, 130, 233, 131, 181, 228, 187, 182, 239, 188, 154, 60, 97, 32, 104, 114, 101, 102, 61, 92, 34, 109, 97, 105, 108, 116, 111, 58, 112, 111, 114, 116, 111, 102, 105, 110, 111, 46, 114, 101, 115, 101, 114, 118, 97, 116, 105, 111, 110, 64, 115, 97, 110, 100, 115, 46, 99, 111, 109, 46, 109, 111, 92, 34, 32, 114, 101, 108, 61, 92, 34, 110, 111, 111, 112, 101, 110, 101, 114, 32, 110, 111, 114, 101, 102, 101, 114, 114, 101, 114, 92, 34, 32, 116, 97, 114, 103, 101, 116, 61, 92, 34, 95, 98, 108, 97, 110, 107, 92, 34, 62, 112, 111, 114, 116, 111, 102, 105, 110, 111, 46, 114, 101, 115, 101, 114, 118, 97, 116, 105, 111, 110, 64, 115, 97, 110, 100, 115, 46, 99, 111, 109, 46, 109, 111, 60, 47, 97, 62, 60, 47, 112, 62, 60, 112, 62, 60, 98, 114, 62, 60, 47, 112, 62, 60, 112, 62, 60, 98, 114, 62, 60, 47, 112, 62, 34, 44, 34, 104, 111, 119, 84, 111, 82, 101, 100, 101, 101, 109, 34, 58, 110, 117, 108, 108, 44, 34, 105, 109, 103, 95, 98, 97, 110, 110, 101, 114, 95, 117, 114, 108, 34, 58, 34, 104, 116, 116, 112, 115, 58, 47, 47, 101, 120, 111, 115, 115, 46, 111, 115, 115, 45, 99, 110, 45, 115, 104, 101, 110, 122, 104, 101, 110, 46, 97, 108, 105, 121, 117, 110, 99, 115, 46, 99, 111, 109, 47, 118, 50, 47, 100, 101, 118, 47, 111, 102, 102, 101, 114, 95, 99, 97, 116, 97, 108, 111, 103, 117, 101, 115, 47, 100, 105, 110, 105, 110, 103, 45, 116, 105, 108, 101, 45, 112, 111, 114, 116, 111, 102, 105, 110, 111, 45, 53, 48, 48, 37, 67, 51, 37, 57, 55, 51, 52, 48, 45, 55, 101, 97, 51, 57, 102, 50, 54, 53, 54, 97, 100, 54, 56, 53, 102, 99, 98, 54, 102, 99, 102, 48, 54, 52, 53, 54, 102, 101, 55, 100, 54, 46, 106, 112, 103, 34, 44, 34, 105, 109, 103, 95, 99, 111, 118, 101, 114, 95, 117, 114, 108, 34, 58, 34, 104, 116, 116, 112, 115, 58, 47, 47, 101, 120, 111, 115, 115, 46, 111, 115, 115, 45, 99, 110, 45, 115, 104, 101, 110, 122, 104, 101, 110, 46, 97, 108, 105, 121, 117, 110, 99, 115, 46, 99, 111, 109, 47, 118, 50, 47, 100, 101, 118, 47, 111, 102, 102, 101, 114, 95, 99, 97, 116, 97, 108, 111, 103, 117, 101, 115, 47, 49, 49, 50, 53, 120, 54, 48, 48, 45, 100, 97, 53, 51, 98, 56, 52, 102, 49, 49, 99, 48, 97, 55, 97, 57, 55, 100, 100, 102, 99, 57, 102, 56, 49, 102, 98, 57, 50, 53, 55, 50, 46, 106, 112, 103, 34, 44, 34, 115, 117, 109, 109, 97, 114, 121, 34, 58, 34, 32, 34, 44, 34, 116, 101, 114, 109, 115, 34, 58, 110, 117, 108, 108, 44, 34, 116, 105, 116, 108, 101, 34, 58, 34, 231, 162, 167, 230, 191, 164, 230, 132, 143, 229, 156, 139, 230, 188, 129, 233, 132, 137, 34, 125, 7, 72, 131, 127, 190, 112, 1, 0, 0, 10, 18, 3, 4, 10, 0, 0, 0, 122, 95, 100, 114, 97, 102, 116, 95, 101, 110, 5, 7, 0, 0, 0, 3, 2, 0, 0, 0, 123, 125, 7, 235, 61, 250, 190, 112, 1, 0, 0, 10, 170, 3, 4, 10, 0, 0, 0, 122, 95, 100, 114, 97, 102, 116, 95, 107, 111, 5, 7, 0, 0, 0, 3, 2, 0, 0, 0, 123, 125, 7, 235, 61, 250, 190, 112, 1, 0, 0, 10, 252, 3, 4, 10, 0, 0, 0, 122, 95, 100, 114, 97, 102, 116, 95, 115, 99, 5, 7, 0, 0, 0, 3, 2, 0, 0, 0, 123, 125, 7, 235, 61, 250, 190, 112, 1, 0, 0, 10, 116, 3, 4, 10, 0, 0, 0, 122, 95, 100, 114, 97, 102, 116, 95, 116, 99, 5, 7, 0, 0, 0, 3, 2, 0, 0, 0, 123, 125, 7, 235, 61, 250, 190, 112, 1, 0, 0, 10, 94, 9, 92>>

    index = PlainBuffer.calculate_tag_cell_index(mock)
    assert index == 1043
  end

  test "deserialize rows" do
    rows = <<117, 0, 0, 0, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 57, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 240, 98, 69, 111, 121, 91, 5, 0, 10, 4, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 11, 0, 0, 0, 3, 6, 0, 0, 0, 110, 97, 109, 101, 95, 49, 7, 54, 122, 241, 24, 95, 1, 0, 0, 10, 212, 3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 54, 122, 241, 24, 95, 1, 0, 0, 10, 167, 9, 130, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 10, 12, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 208, 8, 71, 111, 121, 91, 5, 0, 10, 143, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 11, 0, 0, 0, 3, 6, 0, 0, 0, 110, 97, 109, 101, 95, 50, 7, 162, 122, 241, 24, 95, 1, 0, 0, 10, 155, 3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 7, 162, 122, 241, 24, 95, 1, 0, 0, 10, 101, 9, 132>>
    result = PlainBuffer.deserialize_rows(rows)
    assert [{[{"partition_key", 1}, {"id", 1507951999542000}], [{"name", "name_1", 1507951999542}, {"value", 1, 1507951999542}]}, {[{"partition_key", 2}, {"id", 1507951999650000}], [{"name", "name_2", 1507951999650}, {"value", 2, 1507951999650}]}] = result
  end

  test "deserialize rows 2" do
    rows = <<117, 0, 0, 0, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 164, 19, 0, 0, 0, 0, 0, 0, 10, 2, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 48, 196, 224, 125, 121, 91, 5, 0, 10, 44, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 14, 0, 0, 0, 3, 9, 0, 0, 0, 110, 97, 109, 101, 95, 53, 48, 50, 56, 7, 126, 55, 245, 24, 95, 1, 0, 0, 10, 111, 3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 164, 19, 0, 0, 0, 0, 0, 0, 7, 126, 55, 245, 24, 95, 1, 0, 0, 10, 182, 9, 81>>
    result = PlainBuffer.deserialize_rows(rows)
    assert [{[{"partition_key", 5028}, {"id", 1507952244606000}], [{"name", "name_5028", 1507952244606}, {"value", 5028, 1507952244606}]}] == result

    rows = <<117, 0, 0, 0, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 10, 59, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 192, 22, 83, 111, 121, 91, 5, 0, 10, 119, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 12, 0, 0, 0, 3, 7, 0, 0, 0, 110, 97, 109, 101, 95, 49, 56, 7, 184, 125, 241, 24, 95, 1, 0, 0, 10, 1, 3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 7, 184, 125, 241, 24, 95, 1, 0, 0, 10, 223, 9, 171>>
    result = PlainBuffer.deserialize_rows(rows)
    assert [{[{"partition_key", 18}, {"id", 1507952000440000}], [{"name", "name_18", 1507952000440}, {"value", 18, 1507952000440}]}] == result

    rows = <<117, 0, 0, 0, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 88, 2, 0, 0, 0, 0, 0, 0, 10, 224, 3, 4, 2, 0, 0, 0, 105, 100, 5, 9, 0, 0, 0, 0, 160, 13, 253, 112, 121, 91, 5, 0, 10, 246, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 13, 0, 0, 0, 3, 8, 0, 0, 0, 110, 97, 109, 101, 95, 54, 48, 48, 7, 196, 234, 241, 24, 95, 1, 0, 0, 10, 2, 3, 4, 5, 0, 0, 0, 118, 97, 108, 117, 101, 5, 9, 0, 0, 0, 0, 88, 2, 0, 0, 0, 0, 0, 0, 7, 196, 234, 241, 24, 95, 1, 0, 0, 10, 61, 9, 138>>
    result = PlainBuffer.deserialize_rows(rows)
    assert [{[{"partition_key", 600}, {"id", 1507952028356000}], [{"name", "name_600", 1507952028356}, {"value", 600, 1507952028356}]}] == result

    rows = <<117, 0, 0, 0, 1, 3, 4, 8, 0, 0, 0, 117, 110, 105, 120, 116, 105, 109, 101, 5, 9, 0, 0, 0, 0, 113, 184, 83, 92, 0, 0, 0, 0, 10, 2, 3, 4, 7, 0, 0, 0, 117, 115, 101, 114, 95, 105, 100, 5, 23, 0, 0, 0, 3, 18, 0, 0, 0, 51, 48, 56, 56, 56, 48, 50, 52, 54, 56, 54, 54, 53, 52, 54, 52, 49, 48, 10, 255, 2, 3, 4, 8, 0, 0, 0, 98, 105, 114, 116, 104, 100, 97, 121, 5, 15, 0, 0, 0, 3, 10, 0, 0, 0, 49, 57, 57, 52, 45, 48, 51, 45, 48, 50, 7, 49, 123, 8, 167, 104, 1, 0, 0, 10, 2, 3, 4, 11, 0, 0, 0, 98, 105, 122, 95, 99, 97, 114, 100, 95, 110, 111, 5, 22, 0, 0, 0, 3, 17, 0, 0, 0, 49, 50, 51, 48, 48, 50, 48, 48, 48, 50, 48, 56, 55, 56, 56, 54, 49, 7, 49, 123, 8, 167, 104, 1, 0, 0, 10, 138, 9, 247>>
    result = PlainBuffer.deserialize_rows(rows)
    assert [{[{"unixtime", 1548990577}, {"user_id", "308880246866546410"}], [{"birthday", "1994-03-02", 1548990577457}, {"biz_card_no", "12300200020878861", 1548990577457}]}] == result
  end

  test "serialize put row with float value" do
    pks = [{"partition_key", 1}]
    attrs = [{"size", 1.1}]
    result = PlainBuffer.serialize_for_put_row(pks, attrs)
    expected = <<117, 0, 0, 0, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 57, 2, 3, 4, 4, 0, 0, 0, 115, 105, 122, 101, 5, 9, 0, 0, 0, 1, 154, 153, 153, 153, 153, 153, 241, 63, 10, 95, 9, 20>>
    assert result == expected
  end

  test "serialize delete row" do
    pks = [{"partition_key", 1}]
    result = PlainBuffer.serialize_for_delete_row(pks)
    expected = <<117, 0, 0, 0, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 57, 8, 9, 67>>
    assert result == expected
  end

  test "serialize put row with non-ascii" do
    pks = [{"partition_key", 3}]
    attrs = [{"name", "测试"}]
    result = PlainBuffer.serialize_for_put_row(pks, attrs)
    expected = <<117, 0, 0, 0, 1, 3, 4, 13, 0, 0, 0, 112, 97, 114, 116, 105, 116, 105, 111, 110, 95, 107, 101, 121, 5, 9, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 10, 31, 2, 3, 4, 4, 0, 0, 0, 110, 97, 109, 101, 5, 11, 0, 0, 0, 3, 6, 0, 0, 0, 230, 181, 139, 232, 175, 149, 10, 98, 9, 58>>
    assert result == expected
    row = PlainBuffer.deserialize_row(result)
    assert row == {[{"partition_key", 3}], [{"name", "测试", nil}]}
  end

  test "splice rows may make some item missed" do
    rows = <<117, 0, 0, 0, 1, 3, 4, 9, 0, 0, 0, 116, 105, 109, 101, 115, 116, 97,
     109, 112, 5, 9, 0, 0, 0, 0, 28, 146, 229, 90, 0, 0, 0, 0, 10, 243, 3, 4,
     15, 0, 0, 0, 99, 111, 110, 102, 105, 114, 109, 97, 116, 105, 111, 110, 95,
     105, 100, 5, 12, 0, 0, 0, 3, 7, 0, 0, 0, 72, 86, 55, 56, 50, 51, 52, 10,
     232, 2, 3, 4, 16, 0, 0, 0, 110, 117, 109, 98, 101, 114, 95, 111, 102, 95,
     103, 117, 101, 115, 116, 115, 5, 9, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 7,
     40, 194, 194, 16, 99, 1, 0, 0, 10, 1, 3, 4, 15, 0, 0, 0, 110, 117, 109, 98,
     101, 114, 95, 111, 102, 95, 114, 111, 111, 109, 115, 5, 9, 0, 0, 0, 0, 2,
     0, 0, 0, 0, 0, 0, 0, 7, 40, 194, 194, 16, 99, 1, 0, 0, 10, 218, 3, 4, 10,
     0, 0, 0, 115, 116, 97, 114, 116, 95, 100, 97, 116, 101, 5, 15, 0, 0, 0, 3,
     10, 0, 0, 0, 50, 48, 49, 56, 45, 48, 53, 45, 48, 57, 7, 40, 194, 194, 16,
     99, 1, 0, 0, 10, 1, 3, 4, 9, 0, 0, 0, 115, 117, 98, 109, 105, 116, 95, 105,
     112, 5, 20, 0, 0, 0, 3, 15, 0, 0, 0, 49, 49, 54, 46, 50, 48, 55, 46, 50,
     50, 55, 46, 49, 49, 55, 7, 40, 194, 194, 16, 99, 1, 0, 0, 10, 124, 9, 51>>

    readabled_rows = PlainBuffer.deserialize_rows(rows)
    for row <- readabled_rows do
      {pks, attrs} = row
      assert pks == [{"timestamp", 1524994588}, {"confirmation_id", "HV78234"}]
      assert length(attrs) == 4
      {attr1_name, attr1_val, _} = Enum.at(attrs, 0)
      assert attr1_name == "number_of_guests" and attr1_val == 4
      {attr2_name, attr2_val, _} = Enum.at(attrs, 1)
      assert attr2_name == "number_of_rooms" and attr2_val == 2
      {attr3_name, attr3_val, _} = Enum.at(attrs, 2)
      assert attr3_name == "start_date" and attr3_val == "2018-05-09"
      {attr4_name, attr4_val, _} = Enum.at(attrs, 3)
      assert attr4_name == "submit_ip" and attr4_val == "116.207.227.117"
    end
  end

end
